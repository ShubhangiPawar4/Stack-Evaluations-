#include <stdio.h>
#define MAX 100

struct Stack {
    int top;
    char items[MAX];
};

void push(struct Stack* s, char item) {
    if (s->top < MAX - 1) {
        s->items[++(s->top)] = item;
    } else {
        printf("Stack is full!\n");
    }
}

char pop(struct Stack* s) {
    if (s->top >= 0) {
        return s->items[(s->top)--];
    } else {
        return '\0';  
    }
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;
}

void infix_to_postfix(char* infix, char* postfix) {
    struct Stack s;
    s.top = -1;
    int i = 0, k = 0;
    char c;

    while ((c = infix[i++]) != '\0') {
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
            postfix[k++] = c;
        } 
        else if (c == '(') {
            push(&s, c);
        } 
        else if (c == ')') {
            while (s.top != -1 && s.items[s.top] != '(') {
                postfix[k++] = pop(&s);
            }
            pop(&s);  
        } 
        else if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
            while (s.top != -1 && precedence(c) <= precedence(s.items[s.top])) {
                postfix[k++] = pop(&s);
            }
            push(&s, c);
        }
    }

    while (s.top != -1) {
        postfix[k++] = pop(&s);
    }

    postfix[k] = '\0';  
}

void reverse_expression(char* exp) {
    int n = 0;
    while (exp[n] != '\0') {
        n++;
    }

    for (int i = 0; i < n / 2; i++) {
        char temp = exp[i];
        exp[i] = exp[n - i - 1];
        exp[n - i - 1] = temp;
    }

    for (int i = 0; i < n; i++) {
        if (exp[i] == '(') {
            exp[i] = ')';
        } else if (exp[i] == ')') {
            exp[i] = '(';
        }
    }
}

void infix_to_prefix(char* infix, char* prefix) {
    reverse_expression(infix);
    char postfix[MAX];
    infix_to_postfix(infix, postfix);
    reverse_expression(postfix);
    
    int i = 0;
    while (postfix[i] != '\0') {
        prefix[i] = postfix[i];
        i++;
    }
    prefix[i] = '\0';
}

int evaluate_postfix(char* postfix) {
    struct Stack s;
    s.top = -1;
    int i = 0;
    char c;

    while ((c = postfix[i++]) != '\0') {
        if (c >= '0' && c <= '9') {
            push(&s, c - '0');  
        } 
        else if (c == '+' || c == '-' || c == '*' || c == '/') {
            int val1 = pop(&s);
            int val2 = pop(&s);
            switch (c) {
                case '+': push(&s, val2 + val1); break;
                case '-': push(&s, val2 - val1); break;
                case '*': push(&s, val2 * val1); break;
                case '/': push(&s, val2 / val1); break;
            }
        }
    }

    return pop(&s);
}

void menu() {
    char infix[MAX], postfix[MAX], prefix[MAX];
    int choice;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Infix to Postfix\n");
        printf("2. Infix to Prefix\n");
        printf("3. Evaluate Postfix Expression\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter an infix expression: ");
                scanf("%s", infix);
                infix_to_postfix(infix, postfix);
                printf("Postfix expression: %s\n", postfix);
                break;

            case 2:
                printf("Enter an infix expression: ");
                scanf("%s", infix);
                infix_to_prefix(infix, prefix);
                printf("Prefix expression: %s\n", prefix);
                break;

            case 3:
                printf("Enter a postfix expression (digits only): ");
                scanf("%s", postfix);
                printf("Result of postfix evaluation: %d\n", evaluate_postfix(postfix));
                break;

            case 4:
                printf("Exiting...\n");
                return;

            default:
                printf("Invalid choice. Try again.\n");
        }
    }
}

int main() {
    menu();
    return 0;
}
